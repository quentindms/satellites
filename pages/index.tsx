import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import { useState } from "react";
import Button from "../src/components/Button";
import SatelliteList from "../src/components/SatelliteList";
import { SatellitePosition, SatelliteVisualPasses } from "../types/satellites";
import styles from "../styles/Home.module.css";
import { positionsFetcher, visualPassesFetcher } from "../src/services/n2yo";

interface Props {
  satellites: SatellitePosition[];
  visualPasses: SatelliteVisualPasses[];
}
const Home: NextPage<Props> = ({ satellites, visualPasses }: Props) => {
  const [show, setShow] = useState(false);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <div className={styles.help}>
          <Button onClick={() => setShow((curr) => !curr)}>
            <div className="startIcon">
              <Image
                src="/satellite.png"
                alt="satellite icon"
                width="20"
                height="20"
              />
            </div>
            I&apos;m lost! Help me!
          </Button>
        </div>
        <div className={styles.grid}>
          {show && (
            <SatelliteList
              satellites={satellites}
              visualPasses={visualPasses}
            />
          )}
        </div>
      </main>
    </div>
  );
};

export async function getStaticProps() {
  const norad_ids =
    process.env.NEXT_PUBLIC_OBSERVER_NORAD_IDS?.split(",") || [];

  const satellites = await Promise.all(
    norad_ids.map((norad_id) =>
      positionsFetcher(
        norad_id,
        process.env.NEXT_PUBLIC_OBSERVER_LAT,
        process.env.NEXT_PUBLIC_OBSERVER_LNG,
        process.env.NEXT_PUBLIC_OBSERVER_ALT
      )
    )
  );

  const visualPasses = await Promise.all(
    norad_ids.map((norad_id) =>
      visualPassesFetcher(
        norad_id,
        process.env.NEXT_PUBLIC_OBSERVER_LAT,
        process.env.NEXT_PUBLIC_OBSERVER_LNG,
        process.env.NEXT_PUBLIC_OBSERVER_ALT
      )
    )
  );

  return {
    props: {
      satellites,
      visualPasses,
    },
    revalidate: 600, // 10 min
  };
}

export default Home;
